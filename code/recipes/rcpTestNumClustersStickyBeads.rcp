<description> test recipe for number of clusters of sticky beads</description>
<func> SetRecipeParams </func>
%Insert parameters as obj.params.[paramsName]=[paramsValue]
<func> PreSimulationBatchActions </func>
%Actions performed before each simulation batch
<func> PreRunActions </func>
%Actions performed before each simulation run.
%Note that SimpleRouse class is initialized before each simulation
<func> PreStepActions </func>
%Actions performed before each step of the Rouse chain.
<func> PostStepActions </func>
%Actions performed before each step of the Rouse chain.
connectMat  = obj.objectManager.connectivity;
connectMat  = connectMat & ~diag(true(1,size(connectMat,1)-1),1)  & ~diag(true(1,size(connectMat,1)-1),-1);
numSim  = obj.simulationRound;
numStep = obj.simulationData(numSim).step;
% find the number of clusters
[s,~,~] = networkComponents(connectMat);
obj.dataRecorder.params.numCluster{numSim}(numStep) = s;      
<func> PostRunActions </func>
%Actions performed sfter each simulation run.
numSim  = obj.simulationRound;
numStep = obj.simulationData(numSim).step;
dt      = obj.params.simulator.dt;
idx= min(find(obj.dataRecorder.params.numCluster{numSim}~=0));
k = 1;
for nIdx = idx:numStep-1
if obj.dataRecorder.params.numCluster{numSim}(nIdx)~=obj.dataRecorder.params.numCluster{numSim}(nIdx+1)
cIdx(k) = nIdx+1;
k = k+1;
end
end
obj.dataRecorder.params.stickyTime{numSim} = [idx*dt cIdx*dt];
numCluster(numSim,1) =  obj.dataRecorder.params.numCluster{numSim}(idx);
numCluster(numSim,2:k)= obj.dataRecorder.params.numCluster{numSim}(cIdx);
obj.dataRecorder.params.numCluster{numSim} = zeros(1,k);
obj.dataRecorder.params.numCluster{numSim}= numCluster(numSim,:);
<func> PostSimulationBatchActions </func>
%Actions performed before each simulation batch.
